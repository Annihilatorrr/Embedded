/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "display7segmentmax7219.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define PLL_M  16
#define PLL_N  336
#define PLL_P   2
#define PLL_Q   7

int ClockInit(void)
{
	__IO int StartUpCounter;

	//ЗАПУСК КВАРЦЕВОГО ГЕНЕРАТОРА:

	RCC->CR |= RCC_CR_HSEON; //Запускаем генератор HSE

	//Ждем успешного запуска или окончания тайм-аута
	for(StartUpCounter = 0; ; StartUpCounter++)
	{
		//Если успешно запустилось, то выходим из цикла
		if(RCC->CR & RCC_CR_HSERDY) break;

		//Если не запустилось, то отключаем все, что включили
		if(StartUpCounter > 0x1000) RCC->CR &= ~(1<<RCC_CR_HSEON_Pos);
	}

	// HSE is PLL source
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
	RCC->CR &= ~(RCC_CR_PLLON);

	// set PLL P prescaler (0b00 = 2)
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);

	// clear PLL N
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
	// set PLL N (0b101010000 = 336)
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_8);

	// clear PLL M
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
	// set PLL M prescaler (0b001000 = 8)
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;

	// AHB Prescaler (not divided)
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;

	//APB1 Prescaler (divide by 4)
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

	//APB2 Prescaler (divide by 2)
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;

	//PLL enable
	RCC->CR |= RCC_CR_PLLON;
	// Wait PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {} ;

	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
	//PLL System
	RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {};

	//После того, как переключились на внешний источник такирования отключаем внутренний RC-генератор (HSI) для экономии энергии
	RCC->CR &= ~(1<<RCC_CR_HSION_Pos);

	return 0;
}

int main(void)
{
	ClockInit();

	SpiF401 spi1(SpiF401::SpiNumber::Spi1, SpiF401::SpiFrameSize::Bit8);
	SpiF401 spi2(SpiF401::SpiNumber::Spi2, SpiF401::SpiFrameSize::Bit8);
	SpiF401 spi3(SpiF401::SpiNumber::Spi3, SpiF401::SpiFrameSize::Bit8);

	Display7segmentMax7219<Controller::f401> display1(&spi1);
	display1.init(15, 8);
	display1.print(987);

	Display7segmentMax7219<Controller::f401> display2(&spi2);
	display2.init(15, 8);
	display2.print(432);
	/* Loop forever */
	for(;;);
}
